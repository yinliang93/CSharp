using System;
using System.Threading;
using System.Windows.Forms;

namespace _10.C_基础知识_delegate异步编程 {
    public delegate int DlgtCalcu(int a, int b);
    public partial class Form1 : Form {
        public Form1() {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e) {

        }

			//同步会等待前面的任务执行完毕后,在执行下面的任务;
        private void buttonSync_Click(object sender, EventArgs e) {
            labelAdd.Text = Add(10, 20).ToString();
            labelMulti.Text = Mulit(10, 20).ToString();
        }
        private void buttonAsync_Click(object sender, EventArgs e) {
            DlgtCalcu calcu = new DlgtCalcu(Add);
          /*calcu += Mulit;
            int res = calcu.Invoke(10, 20); //同时调用2个绑定的方法,只能获取到一个数据
            Console.WriteLine(res);*/
          
			//同时发布10此任务,等待获取结果;异步执行,不会卡窗口,会在回调函数里面等待线程执行完毕
            for (int i = 0 ; i < 10 ; i++) {
                IAsyncResult async = calcu.BeginInvoke(i + 1, 20, (result) => {
                    int r = calcu.EndInvoke(result);
                    Console.WriteLine($"第{result.AsyncState}次 > EndInvoke: " + r);//result.AsyncState获取异步委托回调的参数i
                }, i);
            }
        }

        private int Add(int a, int b) {
            Thread.Sleep(5000);
            // Console.WriteLine("Add执行了...");
            return a + b;
        }
        private int Mulit(int a, int b) {
            Thread.Sleep(2000);
            Console.WriteLine("Mulit...");
            return a * b;
        }


    }
}
